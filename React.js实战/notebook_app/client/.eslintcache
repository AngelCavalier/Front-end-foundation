[{"D:\\Front-end-foundation\\React.js实战\\notebook_app\\client\\src\\index.js":"1","D:\\Front-end-foundation\\React.js实战\\notebook_app\\client\\src\\App.js":"2","D:\\Front-end-foundation\\React.js实战\\notebook_app\\client\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":1612327866454,"results":"4","hashOfConfig":"5"},{"size":5044,"mtime":1612593136599,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1612327866454,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"f3rooh",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\Front-end-foundation\\React.js实战\\notebook_app\\client\\src\\index.js",[],["17","18"],"D:\\Front-end-foundation\\React.js实战\\notebook_app\\client\\src\\App.js",["19","20"],"import React, { Component } from 'react'\n// 引入axios用于发送异步请求获取数据\nimport axios from 'axios'\n// 引入antd中相关的组件\nimport { Button, Input, List, Avatar, Card } from 'antd'\n\n// 引入样式文件\nimport './App.css'\nclass App extends Component {\n  //初始化state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n  }\n\n  // 首先从数据库中获取已有数据\n  // 然后添加轮询机制，用于检测数据库的数据，当数据发生更新时，重新渲染UI\n  componentDidMount() {\n    this.getDataFromDB()\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDB, 1000)\n      this.setState({ intervalIsSet: interval })\n    }\n  }\n\n  // 在componentWillUnmount 时销毁定时器\n  // 需要及时销毁不需要使用的进程\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet)\n      this.setState({ intervalIsSet: null })\n    }\n  }\n\n  // 在前台使用ID作为数据的key来辨识所需要更新或删除的数据\n  // 在后台使用ID作为MongoDB中的数据实例修改依据\n  // getDataFromDB 函数用于从数据库中获取数据\n  getDataFromDB = () => {\n    fetch('/api/getData')\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }))\n  }\n\n  // putDataToDB函数用于调用后台API接口向数据库新增数据\n  putDataToDB = (message) => {\n    let currentIds = this.state.data.map((data) => data.id)\n    let idToBeAdded = 0\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded\n    }\n    axios.post('/api/putData', {\n      id: idToBeAdded,\n      message: message,\n    })\n  }\n\n  // deleteFromDB函数用于调研后台API删除数据库红已经存在的数据\n  deleteFromDB = (idToDelete) => {\n    let objIdToDelete = null\n    this.state.data.forEach((dat) => {\n      if (dat.id == idToDelete) {\n        objIdToDelete = dat._id\n      }\n    })\n    axios.delete('/api/deleteData', {\n      data: {\n        id: objIdToDelete,\n      },\n    })\n  }\n\n  // updateDB 函数用于调用后台API更新数据库中已经存在的数据\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null\n    this.state.data.forEach((dat) => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id\n      }\n    })\n    axios.post('/api/updateData', {\n      id: objIdToUpdate,\n      update: { message: updateToApply },\n    })\n  }\n\n  // 渲染UI的核心方法\n  // 该渲染函数渲染内容与前台界面展示一致\n  render() {\n    const { data = [] } = this.state\n    console.log('data', data)\n    return (\n      <div style={{ width: 990, margin: 20 }}>\n        <List\n          itemLayout=\"horizontal\"\n          dataSource={data}\n          renderItem={(item) => (\n            <List.Item>\n              <List.Item.Meta\n                avatar={\n                  <Avatar src=\"https://gw.alicdn.com/tfs/TB1Hup.wa6qK1RjSZFmXXX0PFXa-1024-1024.jpg\" />\n                }\n                title={<span>{`创建时间： ${item.createdAt}`}</span>}\n                description={`${item.id}: ${item.message}`}\n              />\n            </List.Item>\n          )}\n        />\n        <Card title=\"新增笔记\" style={{ padding: 10, margin: 10 }}>\n          <Input\n            style={{ width: 200 }}\n            onChange={(e) => this.setState({ message: e.target.value })}\n            placeholder=\"请输入笔记内容\"\n          ></Input>\n          <Button\n            type=\"primary\"\n            style={{ margin: 20 }}\n            onClick={() => this.putDataToDB(this.state.message)}\n          >\n            添加\n          </Button>\n        </Card>\n        <Card title=\"删除笔记\" style={{ padding: 10, margin: 10 }}>\n          <Input\n            style={{ width: 200 }}\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"填写所需删除的ID\"\n          ></Input>\n          <Button\n            type=\"primary\"\n            style={{ margin: 20 }}\n            onClick={() => this.deleteFromDB(this.state.idToDelete)}\n          >\n            删除\n          </Button>\n        </Card>\n        <Card title=\"更新笔记\" style={{ padding: 10, margin: 10 }}>\n          <Input\n            style={{ width: 200, marginRight: 10 }}\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"所需更新的ID\"\n          ></Input>\n          <Input\n            style={{ width: 200 }}\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"请输入所需更新的内容\"\n          ></Input>\n          <Button\n            type=\"primary\"\n            style={{ margin: 20 }}\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            更新\n          </Button>\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default App\n","D:\\Front-end-foundation\\React.js实战\\notebook_app\\client\\src\\reportWebVitals.js",[],["21","22"],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":66,"column":18,"nodeType":"29","messageId":"30","endLine":66,"endColumn":20},{"ruleId":"27","severity":1,"message":"28","line":81,"column":18,"nodeType":"29","messageId":"30","endLine":81,"endColumn":20},{"ruleId":"23","replacedBy":"31"},{"ruleId":"25","replacedBy":"32"},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["33"],["34"],"no-global-assign","no-unsafe-negation"]